#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h>
#include "malloc_perso.h"

void* malloc_perso(size_t size)
{
	static int blockCounter = 0;
	static void* lastBlock = NULL;

	if (size == 0)
		return NULL;

	
	size = dataOptimiser(size);

	t_block* newBlock;

	
	if (blockCounter == 0)
	{
	        newBlock = extend_heap(size);	
	        void* endOfBlock = sbrk(0);

		setBlock(newBlock, size, endOfBlock, NULL, false);
		ptr_first_block = newBlock;
	}
	else
	{
		t_block* foundBlock = find_block(size);
                printf("foundBlock address: %p\n", (void*)foundBlock);

		if (foundBlock != NULL)
		{
			        printf("foundBlock address: %p\n", (void*)foundBlock);

			newBlock = foundBlock;
			        printf("newBlock address: %p\n", (void*)newBlock);

			setBlock(newBlock, size, foundBlock->next, foundBlock->previous, false);
			return newBlock;
		}
                newBlock = extend_heap(size);
                void* endOfBlock = sbrk(0);

		setBlock(newBlock, size, endOfBlock, lastBlock, false);
	}
	newBlock->data_ptr = (char*) newBlock + sizeof(t_block);
	printf("\nblock[%d] : %p; next: %p\n", blockCounter, (void*)newBlock, (void*)newBlock->next); 
	blockCounter++;
	lastBlock = newBlock;

	return newBlock;
}

size_t	dataOptimiser(size_t size)
{
	if (size % 4 == 0)
		return size;

	return size + 4 - size % 4;
}

void initialize_block(t_block* block)
{
	if (block == NULL)
		return;

	block->size = 0;
	block->next = NULL;
	block->previous = NULL;
	block->free = false;
	block->data_ptr = NULL;
}

void setBlock(t_block* block, int size, t_block* next, t_block* previous, bool free)
{

	block->size = size;
	block->next = next;
	block->previous = previous;
	block->free = free;
}

t_block* extend_heap(size_t size)
{
	int allocSuccess = 0;
        void* break_ptr = sbrk(0);
	t_block* result = break_ptr;
	
	allocSuccess = brk((char*) break_ptr + sizeof(t_block));

	if (allocSuccess != 0)
		return NULL;
	
	initialize_block(result);
	break_ptr = sbrk(0);

	allocSuccess = brk((char*) break_ptr + size);

	if (allocSuccess != 0)
                return NULL;
        
	return result;
}

t_block* find_block(size_t size)
{
	t_block* block = block_checker(ptr_first_block, size);
printf("found block in find_block: %p\n", (void*)block);

	return block;
}

t_block* block_checker(t_block* block, size_t size)
{
	if (block == NULL)
		return NULL;

	if (block->size >= size && block->free == true)
	{
		printf("found block in block checker: %p\n", (void*)block);
		return (void*)block;
	}


	block_checker(block->next, size);

	return NULL;
}

t_block* split_block (t_block* b, size_t size)
{
	void* newBlock = (char*) b + size;
        initialize_block(newBlock);

	setBlock(newBlock, b->size - size, b->next, b, true);
	b->size = size;
	b->next = newBlock;
	printf("\nnewBlock address: %p\n", newBlock);
	printf("b address: %p\n", newBlock);

	return newBlock;
}
